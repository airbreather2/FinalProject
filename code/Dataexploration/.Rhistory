!is.na(latitude),
yield_value <= 30)
names(data)  # See all column names
# Select and rename columns for easier use
yield <- data %>%
select(Country,
year = Observation.period,
Location = Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
names(data)  # See all column names
################################################################
library(tidyverse)  # For data manipulation and visualization
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(ggplot2)
library(gtsummary)
library(furrr)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
# Select and rename columns for easier use
yield <- data %>%
select(Country,
year = Observation.period,
Location = Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
names(data)  # See all column names
# Select and rename columns for easier use
yield <- data %>%
select(Country,
Observation.period,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
#filter Observation years that have more than 4 characters
yield <- yield %>% filter(nchar(Observation.period) == 4)
# Create color palette
pal <- colorNumeric(palette = "YlOrRd", domain = yield$yield_value)
################################################################
library(tidyverse)  # For data manipulation and visualization
library(sf)         # For spatial data handling
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(sp)
library(dismo)
library(sf)        # core vector GIS package
library(units)     # used for precise unit conversion
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(gtsummary)
library(furrr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
# Create color palette
pal <- colorNumeric(palette = "YlOrRd", domain = yield$yield_value)
# Create Leaflet Map
leaflet(yield) %>%
addTiles() %>%
addCircleMarkers(
lng = ~longitude,  # Use the renamed column
lat = ~latitude,   # Use the renamed column
color = ~pal(yield_value),
popup = ~paste("Country:", Country, "<br>",
"Location:", Location, "<br>",
"Yield:", round(yield_value, 2), "tons/ha"),
radius = 3,
fillOpacity = 0.7
) %>%
addLegend("bottomright",
pal = pal,
values = ~yield_value,
title = "Yield (tons/ha)")
# Histogram of observations per year
ggplot(yield, aes(x = Observation.period)) +  # Closing parenthesis moved here
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme_minimal() +
labs(title = "Observations per Year", x = "Year", y = "Count")
# Bar plot of observations per country and continent
ggplot(yield, aes(x = reorder(Country, -table(Country)[Country]), fill = Continent)) +
geom_bar() +
theme_minimal() +
labs(title = "Number of Observations per Country and Continent", x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#pretty tabular version of this
country_continent_table <- yield %>%
group_by(Country, Continent) %>%
summarise(count = n()) %>%
arrange(desc(count))
country_continent_table %>%
gt() %>%
tab_header(title = "Number of Observations per Country and Continent") %>%
cols_label(
Country = "Country",
Continent = "Continent",
count = "Number of Observations"
)
# Prepare data for heatmap
missing_heatmap_data <- data %>%
group_by(Country) %>%
summarise(across(everything(), ~mean(is.na(.)) * 100)) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Percent_Missing")
# Create heatmap
ggplot(missing_heatmap_data, aes(x = Variable, y = Country, fill = Percent_Missing)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red", name = "% Missing") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Missing Data Heatmap by Country",
x = "Variable",
y = "Country")
# Percentage missing for all variables
pct_missing_all <- data %>%
group_by(Country) %>%
summarise(
Total_Obs = n(),
across(everything(), ~round(mean(is.na(.)) * 100, 2), .names = "Pct_NA_{.col}")
) %>%
arrange(desc(Total_Obs))
kable(pct_missing_all, caption = "Percentage Missing by Country")
kable(detailed_summary, caption = "Missing Data Summary by Country")
# First, create the heatmap_data (this was missing)
heatmap_data <- pct_missing_all %>%
select(-Total_Obs) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Pct_Missing",
names_prefix = "Pct_NA_")
# Create interactive heatmap - use heatmap_data instead of data
p <- plot_ly(
data = heatmap_data,  # This was the issue - should be heatmap_data, not data
x = ~Variable,
y = ~Country,
z = ~Pct_Missing,
type = "heatmap",
colorscale = "RdYlBu",
reversescale = TRUE,
hovertemplate = "Country: %{y}<br>Variable: %{x}<br>Missing: %{z}%<extra></extra>"
) %>%
layout(
title = "Missing Data Heatmap",
xaxis = list(title = "Variable"),
yaxis = list(title = "Country")
)
# Save as HTML
htmlwidgets::saveWidget(p, "visualisation/missing_heatmap_interactive.html")
# Percentage missing for all variables
pct_missing_all <- data %>%
group_by(Country) %>%
summarise(
Total_Obs = n(),
across(everything(), ~round(mean(is.na(.)) * 100, 2), .names = "Pct_NA_{.col}")
) %>%
arrange(desc(Total_Obs))
kable(pct_missing_all, caption = "Percentage Missing by Country")
kable(detailed_summary, caption = "Missing Data Summary by Country")
# First, create the heatmap_data (this was missing)
heatmap_data <- pct_missing_all %>%
select(-Total_Obs) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Pct_Missing",
names_prefix = "Pct_NA_")
# Prepare data for heatmap
missing_heatmap_data <- data %>%
group_by(Country) %>%
summarise(across(everything(), ~mean(is.na(.)) * 100)) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Percent_Missing")
# Create heatmap
ggplot(missing_heatmap_data, aes(x = Variable, y = Country, fill = Percent_Missing)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "red", name = "% Missing") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Missing Data Heatmap by Country",
x = "Variable",
y = "Country")
# Percentage missing for all variables
pct_missing_all <- data %>%
group_by(Country) %>%
summarise(
Total_Obs = n(),
across(everything(), ~round(mean(is.na(.)) * 100, 2), .names = "Pct_NA_{.col}")
) %>%
arrange(desc(Total_Obs))
# First, create the heatmap_data (this was missing)
heatmap_data <- pct_missing_all %>%
select(-Total_Obs) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Pct_Missing",
names_prefix = "Pct_NA_")
library(tidyverse)
# First, create the heatmap_data (this was missing)
heatmap_data <- pct_missing_all %>%
select(-Total_Obs) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Pct_Missing",
names_prefix = "Pct_NA_")
#################################################################
#Use R markdown to create a nice data summary report for anna
conflicts(dpylr)
library(dplyr)
# First, create the heatmap_data (this was missing)
heatmap_data <- pct_missing_all %>%
select(-Total_Obs) %>%
pivot_longer(cols = -Country,
names_to = "Variable",
values_to = "Pct_Missing",
names_prefix = "Pct_NA_")
gc()
# Remove all objects from all environments
rm(list = ls(all.names = TRUE))
rm(list = ls(envir = .GlobalEnv), envir = .GlobalEnv)
# Remove all objects from all environments
rm(list = ls(all.names = TRUE))
rm(list = ls(envir = .GlobalEnv), envir = .GlobalEnv)
gc()
library(tidyverse)   # For dplyr, ggplot2, tidyr functions
library(leaflet)     # For interactive maps
library(gt)          # For nice tables
library(knitr)       # For kable function
library(plotly)      # For interactive heatmaps
library(htmlwidgets) # For saving plotly widgets
# Wheat data with irrigation and rainfall calendar
data <- read.csv("../../data/Data/23-05-mergedwheatdata.csv", fileEncoding = "latin1")
# First, check if data loaded properly
head(data)  # View first few rows
names(data)  # See all column names
str(data)   # See structure of the data
# Select and rename columns for easier use
yield <- data %>%
select(Country,
Observation.period,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
library(tidyverse)   # For dplyr, ggplot2, tidyr functions
library(leaflet)     # For interactive maps
library(gt)          # For nice tables
library(knitr)       # For kable function
library(plotly)      # For interactive heatmaps
library(htmlwidgets) # For saving plotly widgets
# Select and rename columns for easier use
yield <- data %>%
select(Country,
Observation.period,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
detach("package:dplyr", unload=TRUE)
library(dplyr)
# WHEAT DATASET DIAGNOSTIC SCRIPT
# Run this first to identify what's causing the crashes
cat("=== SYSTEM DIAGNOSTIC FOR WHEAT DATASET ===\n")
# 1. SYSTEM RESOURCES CHECK
cat("\n1. SYSTEM RESOURCES:\n")
cat("   • R Version:", R.version.string, "\n")
cat("   • Platform:", R.version$platform, "\n")
cat("   • CPU Cores:", parallel::detectCores(), "\n")
# Memory info
if(file.exists("/proc/meminfo")) {
meminfo <- readLines("/proc/meminfo")[1:3]
cat("   • Memory Info:\n")
for(line in meminfo) cat("     ", line, "\n")
} else {
cat("   • Memory: Cannot read /proc/meminfo\n")
}
# Disk space
tryCatch({
disk_info <- system("df -h .", intern = TRUE)
cat("   • Disk Space:\n")
cat("     ", disk_info[1], "\n")
cat("     ", disk_info[2], "\n")
}, error = function(e) cat("   • Disk: Cannot check disk space\n"))
# 2. PACKAGE AVAILABILITY
cat("\n2. REQUIRED PACKAGES:\n")
required_pkgs <- c("data.table", "tidyverse", "knitr", "ggplot2")
for(pkg in required_pkgs) {
if(requireNamespace(pkg, quietly = TRUE)) {
cat("   ✅", pkg, "- Available\n")
} else {
cat("   ❌", pkg, "- MISSING\n")
}
}
# 3. FILE SYSTEM CHECK
cat("\n3. FILE SYSTEM CHECK:\n")
possible_paths <- c(
"../../data/Data/23-05-mergedwheatdata.csv",
"../data/Data/23-05-mergedwheatdata.csv",
"./23-05-mergedwheatdata.csv",
"23-05-mergedwheatdata.csv"
)
file_found <- FALSE
for(path in possible_paths) {
if(file.exists(path)) {
cat("   ✅ File found at:", path, "\n")
# Get file details
file_info <- file.info(path)
file_size_mb <- round(file_info$size / 1024^2, 2)
cat("      • Size:", file_size_mb, "MB\n")
cat("      • Modified:", file_info$mtime, "\n")
# Check if we can read the file
cat("      • Testing file access...\n")
tryCatch({
# Try to read just the header
if(requireNamespace("data.table", quietly = TRUE)) {
library(data.table)
header_test <- fread(path, nrows = 0)
cat("      ✅ File readable,", ncol(header_test), "columns detected\n")
# Try reading first few rows
sample_test <- fread(path, nrows = 5)
cat("      ✅ Sample read successful,", nrow(sample_test), "rows\n")
file_found <- TRUE
working_path <- path
break
} else {
# Fallback to base R
con <- file(path, "r")
first_line <- readLines(con, n = 1)
close(con)
num_cols <- length(strsplit(first_line, ",")[[1]])
cat("      ✅ File readable,", num_cols, "columns detected\n")
file_found <- TRUE
working_path <- path
break
}
}, error = function(e) {
cat("      ❌ File read error:", e$message, "\n")
})
}
}
if(!file_found) {
cat("   ❌ NO WHEAT DATA FILE FOUND!\n")
cat("   Available CSV files:\n")
csv_files <- list.files(".", pattern = "\\.csv$", recursive = TRUE)
if(length(csv_files) > 0) {
for(file in csv_files) cat("      •", file, "\n")
} else {
cat("      • No CSV files found in current directory\n")
}
}
# 4. MEMORY STRESS TEST
cat("\n4. MEMORY STRESS TEST:\n")
tryCatch({
# Try creating progressively larger objects
cat("   • Testing 100MB object...\n")
test_obj_100mb <- matrix(1:1000000, nrow = 1000, ncol = 1000)
cat("   ✅ 100MB object created successfully\n")
rm(test_obj_100mb)
cat("   • Testing 500MB object...\n")
test_obj_500mb <- matrix(1:12500000, nrow = 2500, ncol = 5000)
cat("   ✅ 500MB object created successfully\n")
rm(test_obj_500mb)
cat("   • Testing 1GB object...\n")
test_obj_1gb <- matrix(1:25000000, nrow = 5000, ncol = 5000)
cat("   ✅ 1GB object created successfully\n")
rm(test_obj_1gb)
gc()
cat("   ✅ Memory stress test PASSED\n")
}, error = function(e) {
cat("   ❌ Memory stress test FAILED:", e$message, "\n")
cat("   This suggests insufficient RAM for large datasets\n")
})
# 5. R CONFIGURATION CHECK
cat("\n5. R CONFIGURATION:\n")
cat("   • Max vector size:", format(as.numeric(Sys.getenv("R_MAX_VSIZE", "0")), scientific = FALSE), "\n")
cat("   • Expression limit:", getOption("expressions"), "\n")
cat("   • Memory limit (if set):", tryCatch(memory.limit(), error = function(e) "Not applicable"), "\n")
# Current memory usage
current_memory <- gc()
cat("   • Current memory usage:\n")
print(current_memory)
# 6. TEMP DIRECTORY CHECK
cat("\n6. TEMP DIRECTORY CHECK:\n")
temp_dir <- tempdir()
cat("   • Temp directory:", temp_dir, "\n")
# Check temp space
tryCatch({
temp_space <- system(paste("df -h", shQuote(temp_dir)), intern = TRUE)
cat("   • Temp space:\n")
cat("     ", temp_space[2], "\n")
}, error = function(e) {
cat("   • Cannot check temp space\n")
})
# Try creating a test file in temp
tryCatch({
test_temp_file <- file.path(temp_dir, "test_file.txt")
writeLines("test", test_temp_file)
if(file.exists(test_temp_file)) {
cat("   ✅ Can write to temp directory\n")
unlink(test_temp_file)
}
}, error = function(e) {
cat("   ❌ Cannot write to temp directory:", e$message, "\n")
})
# 7. FINAL DIAGNOSIS
cat("\n=== DIAGNOSIS SUMMARY ===\n")
if(!file_found) {
cat("🚨 PRIMARY ISSUE: Cannot find the wheat dataset file\n")
cat("   SOLUTION: Locate and copy the file to current directory\n")
} else if(!requireNamespace("data.table", quietly = TRUE)) {
cat("🚨 PRIMARY ISSUE: data.table package missing\n")
cat("   SOLUTION: install.packages('data.table')\n")
} else {
cat("✅ File found and readable\n")
cat("✅ Required packages available\n")
cat("🔍 If still crashing, try the MINIMAL TEST below:\n")
}
# 8. MINIMAL TEST
if(file_found && requireNamespace("data.table", quietly = TRUE)) {
cat("\n8. MINIMAL DATASET TEST:\n")
cat("   Attempting to load just 1000 rows...\n")
tryCatch({
library(data.table)
minimal_test <- fread(working_path, nrows = 1000, encoding = "Latin-1")
cat("   ✅ SUCCESS: Loaded", nrow(minimal_test), "rows ×", ncol(minimal_test), "columns\n")
cat("   File appears to be valid!\n")
# Show first few columns
cat("   First 5 column names:", paste(names(minimal_test)[1:min(5, ncol(minimal_test))], collapse = ", "), "\n")
}, error = function(e) {
cat("   ❌ FAILED even with 1000 rows:", e$message, "\n")
cat("   This suggests file corruption or encoding issues\n")
})
}
cat("\n=== END DIAGNOSTIC ===\n")
