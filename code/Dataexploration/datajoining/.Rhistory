Elevation,
pr_irrigated,
temp1,
temp2,
temp3,
temp4,
temp5,
temp6,
temp7,
temp8,
temp9,
prc1,
prc2,
prc3,
prc4,
prc5,
prc6,
prc7,
prc8,
prc9,
)
View(calendar_covs)
################################################################
library(tidyverse)  # For data manipulation and visualization
library(sf)         # For spatial data handling
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(sp)
library(dismo)
library(sf)        # core vector GIS package
library(units)     # used for precise unit conversion
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(gtsummary)
library(furrr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
library(lubridate)
#################################################################
# Set a seed for reproducibility
set.seed(123)  # Pick any number you like
#load in wheatdata with calendar
calendar <- read.csv("../../../data/Data/wheat_data_with_calendar.csv", fileEncoding = "latin1")
names(calendar)
#load in wheat data covariates
covariates <- read.csv("../../../data/Data/wheat_data_with_covariats.csv", fileEncoding = "latin1")
########Test if ID's are the same to make sure correct data is joined ############################
#get test samples conditionally
# First filter out NA values, then get random sample
testsample <- calendar %>%
filter(!is.na(TN..g.N.kg.1.)) %>%
sample_n(10)
# Get random sample
testsample <- sample_n(calendar, 10)
# Extract the IDs from your sample
sample_ids <- testsample$id
# Use those IDs to filter covariates
covtest <- subset(covariates, id %in% sample_ids)
# Check the overlap
existing_ids <- unique(old_data$id)  # your existing dataset
new_ids <- unique(calendar_covs$id)
length(intersect(existing_ids, new_ids))  # how many IDs overlap?
length(setdiff(new_ids, existing_ids))    # how many are truly new?
# Check the overlap
existing_ids <- unique(calendar$id)  # your existing dataset
new_ids <- unique(covariates$id)
length(intersect(existing_ids, new_ids))  # how many IDs overlap?
length(setdiff(new_ids, existing_ids))    # how many are truly new?
#merged values
mergedataset <- merge(calendar, calendar_covs, by = "ids", suffixes = c("_old", "_new"))
#merged values
mergedataset <- merge(calendar, calendar_covs, by = "id", suffixes = c("_old", "_new"))
View(mergedataset)
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Return the modified dataset
return(dataset)
}
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Return the modified dataset
return(dataset)
}
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Remove a single column
dataset$columnnew <- NULL
# Return the modified dataset
return(dataset)
}
# Remove a single column
dataset[[columnnew]] <- NULL
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Remove a single column
dataset[[columnnew]] <- NULL
# Return the modified dataset
return(dataset)
}
################################################################
library(tidyverse)  # For data manipulation and visualization
library(sf)         # For spatial data handling
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(sp)
library(dismo)
library(sf)        # core vector GIS package
library(units)     # used for precise unit conversion
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(gtsummary)
library(furrr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
# Wheat data with irrigation and rainfall calendar
data <- read.csv("../../data/Data/23-05-mergedwheatdata.csv", fileEncoding = "latin1")
setwd("~/Documents/FinalProject/code/Dataexploration")
# Wheat data with irrigation and rainfall calendar
data <- read.csv("../../data/Data/23-05-mergedwheatdata.csv", fileEncoding = "latin1")
# First, check if data loaded properly
head(data)  # View first few rows
names(data)  # See all column names
str(data)   # See structure of the data
# Select and rename columns for easier use
yield <- data %>%
select(Country,
Observation.period,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
View(data)
# Select and rename columns for easier use
yield <- data %>%
select(Country,
Observation.period_old = year,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
# Select and rename columns for easier use
yield <- data %>%
select(Country,
year = Observation.period_old,
Location,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
# Select and rename columns for easier use
yield <- data %>%
select(Country,
year = Observation.period_old,
Location = Location_old,
Continent,
State.Region.County.Province,
longitude = Conversion.for.longitude,    # Just rename here
latitude = Conversion.for.latitude,      # Just rename here
yield_value = Grain.yield..tons.ha.1.) %>%
mutate(
longitude = as.numeric(longitude),     # Convert to numeric here
latitude = as.numeric(latitude),       # Convert to numeric here
yield_value = as.numeric(yield_value),  # Convert to numeric here
Observation.period = as.numeric(Observation.period)
) %>%
filter(!is.na(yield_value),
!is.na(longitude),
!is.na(latitude),
yield_value <= 30)
View(data)
################################################################
library(tidyverse)  # For data manipulation and visualization
library(sf)         # For spatial data handling
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(sp)
library(dismo)
library(sf)        # core vector GIS package
library(units)     # used for precise unit conversion
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(gtsummary)
library(furrr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
library(lubridate)
#################################################################
# Set a seed for reproducibility
set.seed(123)  # Pick any number you like
#load in wheatdata with calendar
calendar <- read.csv("../../../data/Data/wheat_data_with_calendar.csv", fileEncoding = "latin1")
names(calendar)
#load in wheat data covariates
covariates <- read.csv("../../../data/Data/wheat_data_with_covariats.csv", fileEncoding = "latin1")
########Test if ID's are the same to make sure correct data is joined ############################
#get test samples conditionally
# First filter out NA values, then get random sample
testsample <- calendar %>%
filter(!is.na(TN..g.N.kg.1.)) %>%
sample_n(10)
# Get random sample
testsample <- sample_n(calendar, 10)
# Extract the IDs from your sample
sample_ids <- testsample$id
# Use those IDs to filter covariates
covtest <- subset(covariates, id %in% sample_ids)
# Check the overlap
existing_ids <- unique(calendar$id)  # your existing dataset
new_ids <- unique(covariates$id)
length(intersect(existing_ids, new_ids))  # how many IDs overlap?
length(setdiff(new_ids, existing_ids))    # how many are truly new?
###############################They are the same! #############################################
#DOESNT WORK
# Convert string "NA" to actual NA values first
covs <- covariates %>%
mutate(across(everything(), ~ifelse(. == "NA", NA, .))) %>%
# Then filter rows that aren't all NA
filter(if_any(everything(), ~!is.na(.)))
#filter any rows which are entirely NAs
calendar <- calendar %>%
filter(if_any(everything(), ~!is.na(.)))
###############################rename columns that are to be merged/added from cov dataset ######################
#select all of the correct rows! ask salar or find out what start date and end date refers to cause lord knows I dont
calendar_covs <- covs %>% select(
id,
Location = location,
Continent = continent,
Observation.period = year,
Grain.yield..tons.ha.1. = yield,
Sand,
Silt,
Clay,
Soil.organic.carbon..g.C.kg.1. = SOC,
Soil.pH = PH,
Soil_N,
pr_irrigated,
start_date,
end_date,
AEZ,
Elevation,
pr_irrigated,
temp1,
temp2,
temp3,
temp4,
temp5,
temp6,
temp7,
temp8,
temp9,
prc1,
prc2,
prc3,
prc4,
prc5,
prc6,
prc7,
prc8,
prc9,
)
#merged values
mergedataset <- merge(calendar, calendar_covs, by = "id", suffixes = c("_old", "_new"))
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Remove a single column
dataset[[columnnew]] <- NULL
# Return the modified dataset
return(dataset)
}
# Systematic consolidation of covariates with dual nomenclatural representations
mergedataset <- overwrite(mergedataset, "Location_old", "Location_new")
mergedataset <- overwrite(mergedataset, "Continent_old", "Continent_new")
mergedataset <- overwrite(mergedataset, "Observation.period_old", "Observation.period_new")
mergedataset <- overwrite(mergedataset, "Grain.yield..tons.ha.1._old", "Grain.yield..tons.ha.1._new")
mergedataset <- overwrite(mergedataset, "Sand_old", "Sand_new")
mergedataset <- overwrite(mergedataset, "Silt_old", "Silt_new")
mergedataset <- overwrite(mergedataset, "Clay_old", "Clay_new")
mergedataset <- overwrite(mergedataset, "Soil.organic.carbon..g.C.kg.1._old", "Soil.organic.carbon..g.C.kg.1._new")
mergedataset <- overwrite(mergedataset, "Soil.pH_old", "Soil.pH_new")
mergedataset <- overwrite(mergedataset, "Soil_N_old", "Soil_N_new")
mergedataset <- overwrite(mergedataset, "pr_irrigated_old", "pr_irrigated_new")
mergedataset <- overwrite(mergedataset, "start_date_old", "start_date_new")
mergedataset <- overwrite(mergedataset, "end_date_old", "end_date_new")
names(mergedataset)
write.csv(mergedataset, "../../../data/Data/23-05-mergedwheatdata.csv", row.names = FALSE)
setwd("~/Documents/FinalProject/code/Dataexploration/datajoining")
################################################################
library(tidyverse)  # For data manipulation and visualization
library(sf)         # For spatial data handling
library(tidyverse)
library(terra)
library(raster)
library(sf)
library(sp)
library(dismo)
library(sf)        # core vector GIS package
library(units)     # used for precise unit conversion
library(geodata)   # Download and load functions for core datasets
library(openxlsx)  # Reading data from Excel files
library(rnaturalearth)
library(rnaturalearthdata)
library(ggplot2)
library(gtsummary)
library(furrr)
library(leaflet)
library(ggplot2)
library(dplyr)
library(gt)
library(tidyr)
library(knitr)
library(plotly)
library(htmlwidgets)
library(lubridate)
#################################################################
# Set a seed for reproducibility
set.seed(123)  # Pick any number you like
#load in wheatdata with calendar
calendar <- read.csv("../../../data/Data/wheat_data_with_calendar.csv", fileEncoding = "latin1")
names(calendar)
#load in wheat data covariates
covariates <- read.csv("../../../data/Data/wheat_data_with_covariats.csv", fileEncoding = "latin1")
########Test if ID's are the same to make sure correct data is joined ############################
#get test samples conditionally
# First filter out NA values, then get random sample
testsample <- calendar %>%
filter(!is.na(TN..g.N.kg.1.)) %>%
sample_n(10)
# Get random sample
testsample <- sample_n(calendar, 10)
# Extract the IDs from your sample
sample_ids <- testsample$id
# Use those IDs to filter covariates
covtest <- subset(covariates, id %in% sample_ids)
# Check the overlap
existing_ids <- unique(calendar$id)  # your existing dataset
new_ids <- unique(covariates$id)
length(intersect(existing_ids, new_ids))  # how many IDs overlap?
length(setdiff(new_ids, existing_ids))    # how many are truly new?
###############################They are the same! #############################################
#DOESNT WORK
# Convert string "NA" to actual NA values first
covs <- covariates %>%
mutate(across(everything(), ~ifelse(. == "NA", NA, .))) %>%
# Then filter rows that aren't all NA
filter(if_any(everything(), ~!is.na(.)))
#filter any rows which are entirely NAs
calendar <- calendar %>%
filter(if_any(everything(), ~!is.na(.)))
###############################rename columns that are to be merged/added from cov dataset ######################
#select all of the correct rows! ask salar or find out what start date and end date refers to cause lord knows I dont
calendar_covs <- covs %>% select(
id,
Location = location,
Continent = continent,
Observation.period = year,
Grain.yield..tons.ha.1. = yield,
Sand,
Silt,
Clay,
Soil.organic.carbon..g.C.kg.1. = SOC,
Soil.pH = PH,
Soil_N,
pr_irrigated,
start_date,
end_date,
AEZ,
Elevation,
pr_irrigated,
temp1,
temp2,
temp3,
temp4,
temp5,
temp6,
temp7,
temp8,
temp9,
prc1,
prc2,
prc3,
prc4,
prc5,
prc6,
prc7,
prc8,
prc9,
)
#merged values
mergedataset <- merge(calendar, calendar_covs, by = "id", suffixes = c("_old", "_new"))
#Created function to overwrite old column to match new column
overwrite <- function(dataset, columnold, columnnew){
# Use the old column name as the output column name
dataset[[columnold]] <- ifelse(is.na(dataset[[columnnew]]),
dataset[[columnold]],
dataset[[columnnew]])
# Remove a single column
dataset[[columnnew]] <- NULL
# Return the modified dataset
return(dataset)
}
# Systematic consolidation of covariates with dual nomenclatural representations
mergedataset <- overwrite(mergedataset, "Location_old", "Location_new")
mergedataset <- overwrite(mergedataset, "Continent_old", "Continent_new")
mergedataset <- overwrite(mergedataset, "Observation.period_old", "Observation.period_new")
mergedataset <- overwrite(mergedataset, "Grain.yield..tons.ha.1._old", "Grain.yield..tons.ha.1._new")
mergedataset <- overwrite(mergedataset, "Sand_old", "Sand_new")
mergedataset <- overwrite(mergedataset, "Silt_old", "Silt_new")
mergedataset <- overwrite(mergedataset, "Clay_old", "Clay_new")
mergedataset <- overwrite(mergedataset, "Soil.organic.carbon..g.C.kg.1._old", "Soil.organic.carbon..g.C.kg.1._new")
mergedataset <- overwrite(mergedataset, "Soil.pH_old", "Soil.pH_new")
mergedataset <- overwrite(mergedataset, "Soil_N_old", "Soil_N_new")
mergedataset <- overwrite(mergedataset, "pr_irrigated_old", "pr_irrigated_new")
mergedataset <- overwrite(mergedataset, "start_date_old", "start_date_new")
mergedataset <- overwrite(mergedataset, "end_date_old", "end_date_new")
names(mergedataset)
write.csv(mergedataset, "../../../data/Data/23-05-mergedwheatdata.csv", row.names = FALSE)
View(mergedataset)
View(mergedataset)
names(mergedataset)
names(mergedataset)
View(calendar)
gc()
gc()
gc()
